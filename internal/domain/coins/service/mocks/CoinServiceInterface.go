// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	context "context"
	api "merch-store-service/internal/api"

	mock "github.com/stretchr/testify/mock"
)

// CoinServiceInterface is an autogenerated mock type for the CoinServiceInterface type
type CoinServiceInterface struct {
	mock.Mock
}

// BuyItem provides a mock function with given fields: ctx, userID, item
func (_m *CoinServiceInterface) BuyItem(ctx context.Context, userID int, item string) error {
	ret := _m.Called(ctx, userID, item)

	if len(ret) == 0 {
		panic("no return value specified for BuyItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) error); ok {
		r0 = rf(ctx, userID, item)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserInfo provides a mock function with given fields: ctx, userID
func (_m *CoinServiceInterface) GetUserInfo(ctx context.Context, userID int) (*api.InfoResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *api.InfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*api.InfoResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *api.InfoResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.InfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCoins provides a mock function with given fields: ctx, fromUserID, toUser, amount
func (_m *CoinServiceInterface) SendCoins(ctx context.Context, fromUserID int, toUser string, amount int) error {
	ret := _m.Called(ctx, fromUserID, toUser, amount)

	if len(ret) == 0 {
		panic("no return value specified for SendCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string, int) error); ok {
		r0 = rf(ctx, fromUserID, toUser, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewCoinServiceInterface creates a new instance of CoinServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCoinServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CoinServiceInterface {
	mock := &CoinServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
